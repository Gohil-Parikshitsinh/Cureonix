// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String
  name        String?
  imgageUrl   String?
  role        UserRole @default(UNASSIGNED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Patient
  credits Int @default(2)

  // doctors
  speciality String?
  experience Int?
  credentialUrl String?
  description String?
  verificationStatus VerificationStatus? @default(PENDING)

  // Relations
  patientsAppintments Appointment[] @relation("PatientAppointments")
  doctorAppintments Appointment[] @relation("DoctorAppointments")
  availabilities Availability[]
  transactions CreditTransaction[]

}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}


model Availability{
  id String @id @default(uuid())
  doctorId String
  doctor User @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime DateTime
  status SlotStatus @default(AVAILABLE)

  @@index([doctorId, startTime])
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id String @id @default(uuid())
  patientId String 
  patient User @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId String
  doctor User @relation("DoctorAppointments",fields: [doctorId],references: [id])
  startTime String
  endTime String
  status AppointmentStatus @default(SCHEDULED)
  notes String? @db.Text
  patientDescription String? @db.Text

  // video call
  videoSessionId String?
  videSessionToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCLED
}

model CreditTransaction{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount Int
  type TransactionType
  packageId String?
  createAt DateTime @default(now())
}

enum TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADMIN_ADJUSTMENT
}